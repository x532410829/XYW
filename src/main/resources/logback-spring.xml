<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- 
	scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<springProperty scope="context" name="appname" source="logback.appname" />
	<springProperty scope="context" name="logdir" source="logback.logdir" />

	<!-- 子节点<property> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。
　　　　name: 变量的名称
　　　　value: 的值时变量定义的值
	 -->
	<!-- 
	<configuration scan="true" scanPeriod="60 seconds" debug="false"> 
　　　	<property name="APP_Name" value="myAppName" /> 
　　　	<contextName>${APP_Name}</contextName> 
	</configuration>
	 -->

	<!-- 子节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。
		但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
	<contextName>PanaceaProject</contextName>
	
	<!-- 
	子节点<timestamp>：获取时间戳字符串，他有两个属性key和datePattern
　　　　key: 标识此<timestamp> 的名字；
　　　　datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
	 -->
	<!-- 
	<configuration scan="true" scanPeriod="60 seconds" debug="false"> 
　　		<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/> 
　　		<contextName>${bySecond}</contextName> 
	</configuration>
	 -->
	
	<!-- 
	子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
　　　　5.1、ConsoleAppender 把日志输出到控制台，有以下子节点：
　　　　　　<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
　　　　　　<target>：字符串System.out(默认)或者System.err（区别不多说了）
	 -->
	<!--输出到控制台 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36}-%msg%n</pattern>
		</encoder>
	</appender>

	<!--输出到文件 -->
	<appender name="file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 当天的日志 -->
		 <File>${logdir}/${appname}.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		<!-- 每天生产的日志第二天会归档一个带日期的文件 %d{yyyy-MM-dd}代表每天生成一个新的日志 -->
			<fileNamePattern>${logdir}/${appname}/%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 日志最多保存90天，也就是90份  -->
            <maxHistory>90</maxHistory>
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36}-%msg%n</pattern>
		</encoder>
		<!-- 可以设置在日滚动文件中，强制只保存错误ERROR级别以上信息 -->
<!--         <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter> -->
        
	</appender>
	
	
	
	<logger name="com.Panacea" level="info" />

<!-- 定义日志全局最低输出级别是INFO，同时向控制台和日滚动文件输出 -->
	<root level="INFO">
		<appender-ref ref="console" />
		<appender-ref ref="file" />
	</root>
</configuration>